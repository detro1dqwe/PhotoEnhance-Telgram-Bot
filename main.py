# - - - | Telegram bot - Photo enhancer | - - -
# - - - | Developed for Charodey | - - -
import config
import json
from aiogram import Bot, Dispatcher, executor, types
import requests
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

url = "https://api.picsart.io/tools/1.0/upscale"

bot = Bot(token=config.token, parse_mode="Markdown")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=1)
    channel_button = types.InlineKeyboardButton("üí† –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üí†", url='https://t.me/hugooo1')
    acceptCheck_button = types.InlineKeyboardButton("üìÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='checkJoinChannel')
    keyboard.add(channel_button, acceptCheck_button)
    await bot.send_message(chat_id=message.chat.id, text=f"*–ü—Ä–∏–≤–µ—Ç, *`{message.from_user.first_name}`* !*\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ ‚ò∫Ô∏è", reply_markup=keyboard)

@dp.message_handler(commands=['help'])
async def handle_help(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='*‚ùî –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º? C–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @xlxlxdb.*')
    
@dp.callback_query_handler(lambda c: c.data == 'checkJoinChannel')
async def handle_check_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if (await bot.get_chat_member(-1001860539006, callback_query.message.chat.id)).is_chat_member():
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await bot.send_message(chat_id=callback_query.message.chat.id, text='*–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!*\n–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /enhance.')
    else:
        await bot.send_message(chat_id=callback_query.message.chat.id, text='üòï –¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ <a href="https://t.me/hugooo1">–∫–∞–Ω–∞–ª</a>', parse_mode="HTML")

class EnhanceState(StatesGroup):
    WAITING_FOR_PHOTO = State()

@dp.message_handler(commands=['enhance'])  
async def enhanceInputPhoto(message: types.Message):
    if (await bot.get_chat_member(-1001860539006, message.chat.id)).is_chat_member():
        await bot.send_message(chat_id=message.chat.id, text='*üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.*')
        await EnhanceState.WAITING_FOR_PHOTO.set()
    else:
        await bot.send_message(chat_id=message.chat.id, text='üòï –¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ <a href="https://t.me/hugooo1">–∫–∞–Ω–∞–ª</a>', parse_mode="HTML")

    
@dp.message_handler(content_types=['photo', 'text'], state=EnhanceState.WAITING_FOR_PHOTO)
async def handle_received_photo(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        await bot.send_message(chat_id=message.chat.id, text='‚ùóÔ∏è –ù–µ –≤–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∞ png –ª–∏–±–æ jpg.')
    else:
        photo = message.photo[-1]
        file_id = photo.file_id
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path

        file_url = f"https://api.telegram.org/file/bot{config.token}/{file_path}"
        print(file_url)
        response = requests.get(file_url)
        with open('photo.jpg', 'wb') as f:
            f.write(response.content)

        payload = {
            "upscale_factor": "x4",
            "image_url": file_url
        }
        for i in range(len(config.ai_tokens)+1):
            headers = {
                "accept": "application/json",
                "x-picsart-api-key": config.ai_tokens[i]
            }
            response = requests.post(url, data=payload, headers=headers)
            response_json = response.json()
            if response_json.get('fault') is not None:
                pass
                if i==len(config.ai_tokens):
                    await bot.send_message(chat_id=message.chat.id, text='üî¥ –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è –ø–æ–º–æ—â–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @xlxlxdb.')
            else:
                url_link = response_json['data']['url']
                await bot.send_photo(chat_id=message.chat.id, photo=url_link, caption="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω!:")
                break
            await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)